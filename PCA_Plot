############################################################
# RNA-seq PCA Workflow (Publication-Ready, compact sizes)
# - Loads counts from Excel
# - Builds metadata from column names
# - VST (DESeq2) and PCA
# - Publication styling (bold text, dotted grid, bold dashed refs)
# - Saves PNG/TIFF at 1200 dpi (single & double column)
#
# NOTE: Replace "Filepath" below with your repo path.
############################################################

library(readxl)
library(data.table)
library(DESeq2)
library(ggplot2)

set.seed(1234)

# --- 1) Input/Output paths (EDIT THESE) ---
xlsx_path <- "Filepath/ALL_deseq_unnormalized_counts_annotated.xlsx"
outdir    <- "Filepath"   # where images will be written

# --- 2) Load counts from Excel ---
dt <- as.data.table(readxl::read_excel(xlsx_path))

# Expected sample prefixes (adjust if needed)
prefixes <- c("CD8a_RNA_GQI_", "CD8a_RNA_GQP_", "CD8a_RNA_PBS_", "CD8a_RNA_SDEC_")

# Identify count columns
count_cols <- grep(paste0("^(", paste0(prefixes, collapse="|"), ")[0-9]+$"),
                   names(dt), value = TRUE)
if (length(count_cols) == 0) {
  stop("No count columns matched expected prefixes. Check column names or 'prefixes'.")
}

# Identify gene ID column (fallback = first column)
gene_col_cands <- c("Ensembl","ENSEMBL","GeneID","gene_id","gene","Gene","Row.names")
gene_col <- gene_col_cands[match(TRUE, gene_col_cands %in% names(dt))]
if (is.na(gene_col)) gene_col <- names(dt)[1]

# --- 3) Build count matrix ---
genes <- dt[[gene_col]]
counts_mat <- as.matrix(dt[, ..count_cols])
rownames(counts_mat) <- make.unique(as.character(genes))
mode(counts_mat) <- "integer"

# --- 4) Metadata (parse condition & replicate from colnames) ---
samples <- colnames(counts_mat)
condition <- sub("^CD8a_RNA_([A-Za-z0-9]+)_\\d+$", "\\1", samples)   # GQI/GQP/PBS/SDEC
replicate <- as.integer(sub("^.*_(\\d+)$", "\\1", samples))

meta <- data.frame(
  sample = samples,
  condition = factor(condition, levels = c("PBS","GQI","GQP","SDEC")),
  replicate = replicate,
  row.names = samples,
  stringsAsFactors = FALSE
)

# --- 5) DESeq2 object & VST ---
dds <- DESeqDataSetFromMatrix(countData = counts_mat, colData = meta, design = ~ condition)
dds <- estimateSizeFactors(dds)         # explicit normalization factors
vsd <- vst(dds, blind = FALSE)          # variance-stabilizing transform

# --- 6) PCA data ---
pcaData <- plotPCA(vsd, intgroup = "condition", returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))

# --- 7) Plot factory (choose point size per figure size) ---
pal <- c(
  "GQI"  = "#6A3D9A",  # purple
  "PBS"  = "#000000",  # black
  "GQP"  = "#1F78B4",  # blue
  "SDEC" = "#E31A1C"   # red
)

make_pca_plot <- function(point_size = 2.2) {
  ggplot(pcaData, aes(PC1, PC2, color = condition)) +
    # quadrant reference lines (bold dashed at PC1=10, PC2=-5)
    geom_vline(xintercept = 10, color = "grey20", linewidth = 0.8, linetype = "dashed") +
    geom_hline(yintercept = -5, color = "grey20", linewidth = 0.8, linetype = "dashed") +
    # points (size set by argument)
    geom_point(size = point_size, alpha = 0.95) +
    # colors
    scale_color_manual(values = pal, breaks = c("PBS","GQI","GQP","SDEC")) +
    # labels
    labs(
      title = NULL,
      x = paste0("PC1 (", percentVar[1], "%)"),
      y = paste0("PC2 (", percentVar[2], "%)")
    ) +
    # theme
    theme_bw(base_size = 11) +
    theme(
      panel.grid.major = element_line(color = "grey70", linetype = "dotted", linewidth = 0.3),
      panel.grid.minor = element_line(color = "grey85", linetype = "dotted", linewidth = 0.2),
      panel.border     = element_rect(linewidth = 0.8, color = "black"),
      axis.line        = element_line(linewidth = 0.4, color = "black"),
      axis.ticks       = element_line(linewidth = 0.4, color = "black"),
      axis.text        = element_text(face = "bold", color = "black"),
      axis.title       = element_text(face = "bold", color = "black"),
      legend.text      = element_text(face = "bold", color = "black"),
      legend.title     = element_blank(),
      legend.key       = element_blank(),
      legend.position  = "right",
      plot.title       = element_text(face = "bold", hjust = 0.5, color = "black"),
      plot.margin      = margin(6, 6, 6, 6)
    )
}

# --- 8) Save outputs (compact sizes, 1200 dpi) ---
if (!dir.exists(outdir)) dir.create(outdir, recursive = TRUE)

## Recommended point sizes:
## - Single column (~3.15 in width): 2.0–2.3
## - Double column (~6.7 in width): 2.5–3.0
pt_single <- 2.2
pt_double <- 2.8

## Single-column (~80 mm): 3.15 x 2.5 in
p_single <- make_pca_plot(point_size = pt_single)
png(file.path(outdir, "PCA_singlecol_1200dpi.png"),
    width = 3.15, height = 2.5, units = "in", res = 1200)
print(p_single)
dev.off()

tiff(file.path(outdir, "PCA_singlecol_1200dpi.tiff"),
     width = 3.15, height = 2.5, units = "in", res = 1200, compression = "lzw")
print(p_single)
dev.off()

## Double-column (~170 mm): 6.7 x 4.5 in
p_double <- make_pca_plot(point_size = pt_double)
png(file.path(outdir, "PCA_doublecol_1200dpi.png"),
    width = 6.7, height = 4.5, units = "in", res = 1200)
print(p_double)
dev.off()

tiff(file.path(outdir, "PCA_doublecol_1200dpi.tiff"),
     width = 6.7, height = 4.5, units = "in", res = 1200, compression = "lzw")
print(p_double)
dev.off()
